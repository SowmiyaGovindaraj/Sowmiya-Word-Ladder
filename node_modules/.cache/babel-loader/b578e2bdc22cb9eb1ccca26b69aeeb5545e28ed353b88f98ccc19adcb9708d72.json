{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abida\\\\OneDrive\\\\Documents\\\\React\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ErrorAlert from './AlertDialogBox';\nimport wordList from './DataStub.json';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordLadder = () => {\n  _s();\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isTextboxesDisabled, setIsTextboxesDisabled] = useState(false);\n  useEffect(() => {\n    setIsButtonDisabled(startWord === '' || endWord === '' || startWord.length !== endWord.length);\n    setShowResult(false); // Clear solution on input change\n  }, [startWord, endWord]);\n  const handleStartWordChange = e => {\n    setStartWord(e.target.value.trim().replace(/[^A-Za-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const handleEndWordChange = e => {\n    setEndWord(e.target.value.trim().replace(/[^A-Za-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  // Disable the button if start and end words are the same\n  const isSameWords = startWord.trim().toLowerCase() === endWord.trim().toLowerCase();\n  function findLadder(startWord, endWord, wordList) {\n    setTimeout(() => {\n      const wordSet = new Set(wordList);\n      if (!wordSet.has(endWord) || !wordSet.has(startWord)) {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        return setErrorMessage('No solution can be found'); // End word not in the dictionary.\n      }\n\n      const neighborsMap = new Map();\n      const ladder = [];\n      function findNeighbors(word) {\n        const neighbors = [];\n        for (let i = 0; i < word.length; i++) {\n          console.log('ladder 1', word);\n          for (let charCode = 97; charCode <= 122; charCode++) {\n            console.log('ladder 2', charCode);\n            const newWord = word.slice(0, i) + String.fromCharCode(charCode) + word.slice(i + 1);\n            console.log('ladder 3', newWord);\n            if (wordSet.has(newWord) && newWord !== word) {\n              console.log('ladder 4', newWord);\n              neighbors.push(newWord);\n            }\n          }\n        }\n        console.log('ladder 5', neighbors);\n        return neighbors;\n      }\n      function buildNeighborsMap() {\n        for (const word of wordSet) {\n          neighborsMap.set(word, findNeighbors(word));\n        }\n      }\n      function bfs() {\n        const queue = [[startWord]];\n        const visited = new Set([startWord]);\n        while (queue.length) {\n          const path = queue.shift();\n          const currentWord = path[path.length - 1];\n          if (currentWord === endWord) {\n            return path;\n          }\n          for (const neighbor of neighborsMap.get(currentWord)) {\n            if (!visited.has(neighbor)) {\n              visited.add(neighbor);\n              queue.push([...path, neighbor]);\n            }\n          }\n        }\n        return [];\n      }\n      buildNeighborsMap();\n      ladder.push(...bfs());\n      if (ladder.length) {\n        findWordLadder(ladder);\n      } else {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        return setErrorMessage('No solution can be found');\n      }\n      console.log('ladder', ladder);\n      return ladder;\n    }, 500);\n  }\n  const findWordLadder = ladder => {\n    setIsCalculating(true);\n\n    // Simulate API call to find the word ladder\n    //setTimeout(() => {\n    setWordLadder(ladder);\n    setIsSuccess(true);\n    setIsCalculating(false);\n    setShowResult(true);\n    setIsButtonDisabled(true);\n    // }, 500);\n  };\n\n  const handleFindWordLadder = () => {\n    console.log('wordList', wordList);\n    //if (!isButtonDisabled && !isCalculating) {\n    if (startWord === endWord) {\n      setIsButtonDisabled(true);\n      setIsTextboxesDisabled(true);\n      setErrorMessage('Start and end words cannot be the same');\n    } else {\n      findLadder(startWord, endWord, wordList);\n    }\n    //}\n  };\n\n  const handleCloseModal = () => {\n    setErrorMessage('');\n    setStartWord('');\n    setEndWord('');\n    setIsTextboxesDisabled(false);\n  };\n  const ladderSteps = [];\n  for (let i = 0; i < wordLadder.length - 1; i++) {\n    const fromWord = wordLadder[i];\n    const toWord = wordLadder[i + 1];\n    if (fromWord !== toWord) {\n      ladderSteps.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ladder-step\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ladder-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ladder-word\",\n          children: toWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  const scrollableStyle = wordLadder.length > 8 ? {\n    maxHeight: '200px',\n    overflowY: 'scroll'\n  } : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container d-flex align-items-center justify-content-center vh-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-ladder-title\",\n      children: 'Word Ladder'.split('').map((char, index) => {\n        if (char === ' ') return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\xA0\\xA0\\xA0\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 30\n        }, this); // Add non-breaking space\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-letter\",\n          children: char\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 7\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-ladder-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Enter start word (alphabets only)\",\n          value: startWord,\n          onChange: handleStartWordChange,\n          disabled: isTextboxesDisabled === true ? 'disabled' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), isCalculating && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), showResult && isSuccess && !isCalculating && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-ladder-result\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-ladder-scrollable\",\n            style: scrollableStyle,\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"word-list\",\n              children: wordLadder.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"word-list-item animate__animated animate__fadeInUp\",\n                children: word\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Enter end word (alphabets only)\",\n          value: endWord,\n          onChange: handleEndWordChange,\n          disabled: isTextboxesDisabled === true ? 'disabled' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFindWordLadder,\n          className: \"btn btn-primary animate__animated animate__heartBeat\",\n          disabled: !startWord || !endWord || isButtonDisabled || isSameWords,\n          children: \"Solve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n          message: errorMessage,\n          onClose: handleCloseModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(WordLadder, \"5McVJptSm9lmxyEn9/dchOu0A8U=\");\n_c = WordLadder;\nexport default WordLadder;\nvar _c;\n$RefreshReg$(_c, \"WordLadder\");","map":{"version":3,"names":["React","useState","useEffect","ErrorAlert","wordList","jsxDEV","_jsxDEV","WordLadder","_s","startWord","setStartWord","endWord","setEndWord","wordLadder","setWordLadder","showResult","setShowResult","isCalculating","setIsCalculating","isButtonDisabled","setIsButtonDisabled","isSuccess","setIsSuccess","errorMessage","setErrorMessage","isTextboxesDisabled","setIsTextboxesDisabled","length","handleStartWordChange","e","target","value","trim","replace","handleEndWordChange","isSameWords","toLowerCase","findLadder","setTimeout","wordSet","Set","has","neighborsMap","Map","ladder","findNeighbors","word","neighbors","i","console","log","charCode","newWord","slice","String","fromCharCode","push","buildNeighborsMap","set","bfs","queue","visited","path","shift","currentWord","neighbor","get","add","findWordLadder","handleFindWordLadder","handleCloseModal","ladderSteps","fromWord","toWord","className","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableStyle","maxHeight","overflowY","split","map","char","index","type","placeholder","onChange","disabled","style","onClick","message","onClose","_c","$RefreshReg$"],"sources":["C:/Users/abida/OneDrive/Documents/React/my-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ErrorAlert from './AlertDialogBox';\nimport wordList from './DataStub.json'\n\nimport './App.css';\n\nconst WordLadder = () => {\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isTextboxesDisabled, setIsTextboxesDisabled] = useState(false)\n\n  useEffect(() => {\n    setIsButtonDisabled(startWord === '' || endWord === '' || startWord.length !== endWord.length);\n    setShowResult(false); // Clear solution on input change\n  }, [startWord, endWord]);\n\n  const handleStartWordChange = (e) => {\n    setStartWord(e.target.value.trim().replace(/[^A-Za-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const handleEndWordChange = (e) => {\n    setEndWord(e.target.value.trim().replace(/[^A-Za-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n    // Disable the button if start and end words are the same\n    const isSameWords = startWord.trim().toLowerCase() === endWord.trim().toLowerCase();\n\n  function findLadder(startWord, endWord, wordList) {\n    setTimeout(() => {\n      const wordSet = new Set(wordList);\n      if (!wordSet.has(endWord) || !wordSet.has(startWord)) {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        return setErrorMessage('No solution can be found'); // End word not in the dictionary.\n      }\n    \n      const neighborsMap = new Map();\n      const ladder = [];\n    \n      function findNeighbors(word) {\n        const neighbors = [];\n        for (let i = 0; i < word.length; i++) {\n          console.log('ladder 1', word);\n          for (let charCode = 97; charCode <= 122; charCode++) {\n            console.log('ladder 2', charCode);\n            const newWord = word.slice(0, i) + String.fromCharCode(charCode) + word.slice(i + 1);\n            console.log('ladder 3', newWord);\n            if (wordSet.has(newWord) && newWord !== word) {\n              console.log('ladder 4', newWord);\n              neighbors.push(newWord);\n            }\n          }\n        }\n        console.log('ladder 5', neighbors);\n        return neighbors;\n      }\n    \n      function buildNeighborsMap() {\n        for (const word of wordSet) {\n          neighborsMap.set(word, findNeighbors(word));\n        }\n      }\n    \n      function bfs() {\n        const queue = [[startWord]];\n        const visited = new Set([startWord]);\n    \n        while (queue.length) {\n          const path = queue.shift();\n          const currentWord = path[path.length - 1];\n    \n          if (currentWord === endWord) {\n            return path;\n          }\n    \n          for (const neighbor of neighborsMap.get(currentWord)) {\n            if (!visited.has(neighbor)) {\n              visited.add(neighbor);\n              queue.push([...path, neighbor]);\n            }\n          }\n        }\n    \n        return [];\n      }\n    \n      buildNeighborsMap();\n      ladder.push(...bfs());\n      if (ladder.length) {\n        findWordLadder(ladder);\n      }else {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        return setErrorMessage('No solution can be found');\n      }\n      console.log('ladder', ladder);\n      return ladder;\n    }, 500);\n  }\n\n  const findWordLadder = (ladder) => {\n    setIsCalculating(true);\n\n    // Simulate API call to find the word ladder\n    //setTimeout(() => {\n      setWordLadder(ladder);\n      setIsSuccess(true);\n      setIsCalculating(false);\n      setShowResult(true);\n      setIsButtonDisabled(true);\n   // }, 500);\n\n  };\n    \n\n  const handleFindWordLadder = () => {\n    console.log('wordList', wordList);\n    //if (!isButtonDisabled && !isCalculating) {\n      if (startWord === endWord) {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        setErrorMessage('Start and end words cannot be the same');\n      } else {\n        findLadder(startWord, endWord, wordList);\n      }\n    //}\n  };\n\n  const handleCloseModal = () => {\n    setErrorMessage('');\n    setStartWord('');\n    setEndWord('');\n    setIsTextboxesDisabled(false);\n  };\n\n  const ladderSteps = [];\n  for (let i = 0; i < wordLadder.length - 1; i++) {\n    const fromWord = wordLadder[i];\n    const toWord = wordLadder[i + 1];\n    if (fromWord !== toWord) {\n      ladderSteps.push(\n        <div key={i} className=\"ladder-step\">\n          <div className=\"ladder-line\" />\n          <div className=\"ladder-word\">{toWord}</div>\n        </div>\n      );\n    }\n  }\n\n  const scrollableStyle = wordLadder.length > 8 ? { maxHeight: '200px', overflowY: 'scroll' } : {};\n\n  return (\n    <div className=\"container d-flex align-items-center justify-content-center vh-100\">\n      <div className=\"word-ladder-title\">\n      {'Word Ladder'.split('').map((char, index) => {\n    if (char === ' ') return <span key={index}>&nbsp;&nbsp;&nbsp;</span>; // Add non-breaking space\n    return (\n      <div key={index} className=\"title-letter\">\n        {char}\n      </div>\n    );\n  })}\n      </div>\n      <div className=\"word-ladder-container\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter start word (alphabets only)\"\n            value={startWord}\n            onChange={handleStartWordChange}\n            disabled={isTextboxesDisabled === true ? 'disabled' : ''}\n          />\n          {isCalculating && (\n            <div className=\"spinner-container\">\n              <div className=\"spinner\"></div>\n            </div>\n          )}\n          \n        {/* Word Ladder Result */}\n        {showResult && isSuccess && !isCalculating && (\n          <div className=\"word-ladder-result\">\n            <div className=\"word-ladder-scrollable\" style={scrollableStyle}>\n              <ul className=\"word-list\">\n                {wordLadder.map((word, index) => (\n                  <li key={index} className=\"word-list-item animate__animated animate__fadeInUp\">\n                    {word}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter end word (alphabets only)\"\n            value={endWord}\n            onChange={handleEndWordChange}\n            disabled={isTextboxesDisabled === true ? 'disabled' : ''}\n          />\n          <button\n            onClick={handleFindWordLadder}\n            className=\"btn btn-primary animate__animated animate__heartBeat\"\n            disabled={!startWord || !endWord || isButtonDisabled || isSameWords}\n          >\n          Solve\n          </button>\n          {errorMessage && (\n            <ErrorAlert message={errorMessage} onClose={handleCloseModal} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordLadder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}