{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abida\\\\OneDrive\\\\Documents\\\\React\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordLadder = () => {\n  _s();\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const App = () => {\n    // Implement the word ladder algorithm here using BFS or any other suitable approach.\n    // You need to find a series of words that transform the startWord to endWord.\n    // Update the wordLadder state with the result.\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Word Ladder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: startWord,\n        onChange: e => setStartWord(e.target.value),\n        placeholder: \"Enter start word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: endWord,\n        onChange: e => setEndWord(e.target.value),\n        placeholder: \"Enter end word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: findWordLadder,\n        children: \"Find Word Ladder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Word Ladder Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: wordLadder.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: word\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(WordLadder, \"iibxkDgti3GeX/Jw+wnU/MdHbRE=\");\n_c = WordLadder;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"WordLadder\");","map":{"version":3,"names":["logo","jsxDEV","_jsxDEV","WordLadder","_s","startWord","setStartWord","useState","endWord","setEndWord","wordLadder","setWordLadder","App","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","findWordLadder","map","word","index","_c","$RefreshReg$"],"sources":["C:/Users/abida/OneDrive/Documents/React/my-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nconst WordLadder = () => {\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n\n  const App = () => {\n    // Implement the word ladder algorithm here using BFS or any other suitable approach.\n    // You need to find a series of words that transform the startWord to endWord.\n    // Update the wordLadder state with the result.\n  };\n\n  return (\n    <div>\n      <h1>Word Ladder</h1>\n      <div>\n        <input\n          type=\"text\"\n          value={startWord}\n          onChange={(e) => setStartWord(e.target.value)}\n          placeholder=\"Enter start word\"\n        />\n        <input\n          type=\"text\"\n          value={endWord}\n          onChange={(e) => setEndWord(e.target.value)}\n          placeholder=\"Enter end word\"\n        />\n        <button onClick={findWordLadder}>Find Word Ladder</button>\n      </div>\n      <div>\n        <h3>Word Ladder Result:</h3>\n        <ul>\n          {wordLadder.map((word, index) => (\n            <li key={index}>{word}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMK,GAAG,GAAGA,CAAA,KAAM;IAChB;IACA;IACA;EAAA,CACD;EAED,oBACEV,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBf,OAAA;MAAAW,QAAA,gBACEX,OAAA;QACEgB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEd,SAAU;QACjBe,QAAQ,EAAGC,CAAC,IAAKf,YAAY,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC9CI,WAAW,EAAC;MAAkB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,eACFf,OAAA;QACEgB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEX,OAAQ;QACfY,QAAQ,EAAGC,CAAC,IAAKZ,UAAU,CAACY,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC5CI,WAAW,EAAC;MAAgB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFf,OAAA;QAAQsB,OAAO,EAAEC,cAAe;QAAAZ,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC,eACNf,OAAA;MAAAW,QAAA,gBACEX,OAAA;QAAAW,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5Bf,OAAA;QAAAW,QAAA,EACGH,UAAU,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC1B1B,OAAA;UAAAW,QAAA,EAAiBc;QAAI,GAAZC,KAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAC3B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACb,EAAA,CAvCID,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAyChB,eAAeS,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}