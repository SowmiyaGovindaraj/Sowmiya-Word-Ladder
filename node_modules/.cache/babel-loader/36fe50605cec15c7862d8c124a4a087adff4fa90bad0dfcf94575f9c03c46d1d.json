{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abida\\\\OneDrive\\\\Documents\\\\React\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ErrorAlert from './AlertDialogBox';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordLadder = () => {\n  _s();\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isTextboxesDisabled, setIsTextboxesDisabled] = useState(false);\n  useEffect(() => {\n    setIsButtonDisabled(startWord === '' || endWord === '' || startWord.length !== endWord.length);\n    setShowResult(false); // Clear solution on input change\n  }, [startWord, endWord]);\n  const handleStartWordChange = e => {\n    setStartWord(e.target.value.trim().toLowerCase().replace(/[^a-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const handleEndWordChange = e => {\n    setEndWord(e.target.value.trim().toLowerCase().replace(/[^a-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  // Disable the button if start and end words are the same\n  const isSameWords = startWord.trim().toLowerCase() === endWord.trim().toLowerCase();\n  function findLadder(startWord, endWord, wordList) {\n    const wordSet = new Set(wordList);\n    if (!wordSet.has(endWord)) {\n      setIsButtonDisabled(true);\n      setIsTextboxesDisabled(true);\n      return setErrorMessage('No solution can be found'); // End word not in the dictionary.\n    }\n\n    const neighborsMap = new Map();\n    const ladder = [];\n    function findNeighbors(word) {\n      const neighbors = [];\n      for (let i = 0; i < word.length; i++) {\n        for (let charCode = 97; charCode <= 122; charCode++) {\n          const newWord = word.slice(0, i) + String.fromCharCode(charCode) + word.slice(i + 1);\n          if (wordSet.has(newWord) && newWord !== word) {\n            neighbors.push(newWord);\n          }\n        }\n      }\n      return neighbors;\n    }\n    function buildNeighborsMap() {\n      for (const word of wordSet) {\n        neighborsMap.set(word, findNeighbors(word));\n      }\n    }\n    function bfs() {\n      const queue = [[startWord]];\n      const visited = new Set([startWord]);\n      while (queue.length) {\n        const path = queue.shift();\n        const currentWord = path[path.length - 1];\n        if (currentWord === endWord) {\n          return path;\n        }\n        for (const neighbor of neighborsMap.get(currentWord)) {\n          if (!visited.has(neighbor)) {\n            visited.add(neighbor);\n            queue.push([...path, neighbor]);\n          }\n        }\n      }\n      return [];\n    }\n    buildNeighborsMap();\n    ladder.push(...bfs());\n    findWordLadder(ladder);\n    return ladder;\n  }\n  const findWordLadder = ladder => {\n    setIsCalculating(true);\n\n    // Simulate API call to find the word ladder\n    setTimeout(() => {\n      setWordLadder(ladder);\n      setIsSuccess(true);\n      setIsCalculating(false);\n      setShowResult(true);\n      setIsButtonDisabled(true);\n    }, 1000);\n  };\n\n  // Example usage:\n  const wordList = [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"];\n  const handleFindWordLadder = () => {\n    //if (!isButtonDisabled && !isCalculating) {\n    if (startWord === endWord) {\n      setIsButtonDisabled(true);\n      setIsTextboxesDisabled(true);\n      setErrorMessage('Start and end words cannot be the same');\n    } else {\n      findLadder(startWord, endWord, wordList);\n    }\n    //}\n  };\n\n  const handleCloseModal = () => {\n    setErrorMessage('');\n    setStartWord('');\n    setEndWord('');\n    setIsTextboxesDisabled(false);\n  };\n  const ladderSteps = [];\n  for (let i = 0; i < wordLadder.length - 1; i++) {\n    const fromWord = wordLadder[i];\n    const toWord = wordLadder[i + 1];\n    if (fromWord !== toWord) {\n      ladderSteps.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ladder-step\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ladder-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ladder-word\",\n          children: toWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  const scrollableStyle = wordLadder.length > 8 ? {\n    maxHeight: '200px',\n    overflowY: 'scroll'\n  } : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container d-flex align-items-center justify-content-center vh-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-ladder-title\",\n      children: 'Word Ladder'.split('').map((char, index) => {\n        if (char === ' ') return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\xA0\\xA0\\xA0\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 30\n        }, this); // Add non-breaking space\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-letter\",\n          children: char\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-ladder-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Enter start word (alphabets only)\",\n          value: startWord,\n          onChange: handleStartWordChange,\n          disabled: isTextboxesDisabled === true ? 'disabled' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), isCalculating && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), showResult && isSuccess && !isCalculating && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-ladder-result\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-ladder-scrollable\",\n            style: scrollableStyle,\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"word-list\",\n              children: wordLadder.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"word-list-item animate__animated animate__fadeInUp\",\n                children: word\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Enter end word (alphabets only)\",\n          value: endWord,\n          onChange: handleEndWordChange,\n          disabled: isTextboxesDisabled === true ? 'disabled' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFindWordLadder,\n          disabled: !startWord || !endWord || isButtonDisabled || isSameWords,\n          children: \"Solve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n          message: errorMessage,\n          onClose: handleCloseModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(WordLadder, \"5McVJptSm9lmxyEn9/dchOu0A8U=\");\n_c = WordLadder;\nexport default WordLadder;\nvar _c;\n$RefreshReg$(_c, \"WordLadder\");","map":{"version":3,"names":["React","useState","useEffect","ErrorAlert","jsxDEV","_jsxDEV","WordLadder","_s","startWord","setStartWord","endWord","setEndWord","wordLadder","setWordLadder","showResult","setShowResult","isCalculating","setIsCalculating","isButtonDisabled","setIsButtonDisabled","isSuccess","setIsSuccess","errorMessage","setErrorMessage","isTextboxesDisabled","setIsTextboxesDisabled","length","handleStartWordChange","e","target","value","trim","toLowerCase","replace","handleEndWordChange","isSameWords","findLadder","wordList","wordSet","Set","has","neighborsMap","Map","ladder","findNeighbors","word","neighbors","i","charCode","newWord","slice","String","fromCharCode","push","buildNeighborsMap","set","bfs","queue","visited","path","shift","currentWord","neighbor","get","add","findWordLadder","setTimeout","handleFindWordLadder","handleCloseModal","ladderSteps","fromWord","toWord","className","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableStyle","maxHeight","overflowY","split","map","char","index","type","placeholder","onChange","disabled","style","onClick","message","onClose","_c","$RefreshReg$"],"sources":["C:/Users/abida/OneDrive/Documents/React/my-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ErrorAlert from './AlertDialogBox';\n\nimport './App.css';\n\nconst WordLadder = () => {\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isTextboxesDisabled, setIsTextboxesDisabled] = useState(false)\n\n  useEffect(() => {\n    setIsButtonDisabled(startWord === '' || endWord === '' || startWord.length !== endWord.length);\n    setShowResult(false); // Clear solution on input change\n  }, [startWord, endWord]);\n\n  const handleStartWordChange = (e) => {\n    setStartWord(e.target.value.trim().toLowerCase().replace(/[^a-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const handleEndWordChange = (e) => {\n    setEndWord(e.target.value.trim().toLowerCase().replace(/[^a-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n    // Disable the button if start and end words are the same\n    const isSameWords = startWord.trim().toLowerCase() === endWord.trim().toLowerCase();\n\n  function findLadder(startWord, endWord, wordList) {\n    const wordSet = new Set(wordList);\n    if (!wordSet.has(endWord)) {\n      setIsButtonDisabled(true);\n      setIsTextboxesDisabled(true);\n      return setErrorMessage('No solution can be found'); // End word not in the dictionary.\n    }\n  \n    const neighborsMap = new Map();\n    const ladder = [];\n  \n    function findNeighbors(word) {\n      const neighbors = [];\n      for (let i = 0; i < word.length; i++) {\n        for (let charCode = 97; charCode <= 122; charCode++) {\n          const newWord = word.slice(0, i) + String.fromCharCode(charCode) + word.slice(i + 1);\n          if (wordSet.has(newWord) && newWord !== word) {\n            neighbors.push(newWord);\n          }\n        }\n      }\n      return neighbors;\n    }\n  \n    function buildNeighborsMap() {\n      for (const word of wordSet) {\n        neighborsMap.set(word, findNeighbors(word));\n      }\n    }\n  \n    function bfs() {\n      const queue = [[startWord]];\n      const visited = new Set([startWord]);\n  \n      while (queue.length) {\n        const path = queue.shift();\n        const currentWord = path[path.length - 1];\n  \n        if (currentWord === endWord) {\n          return path;\n        }\n  \n        for (const neighbor of neighborsMap.get(currentWord)) {\n          if (!visited.has(neighbor)) {\n            visited.add(neighbor);\n            queue.push([...path, neighbor]);\n          }\n        }\n      }\n  \n      return [];\n    }\n  \n    buildNeighborsMap();\n    ladder.push(...bfs());\n    findWordLadder(ladder);\n    return ladder;\n  }\n\n  const findWordLadder = (ladder) => {\n    setIsCalculating(true);\n\n    // Simulate API call to find the word ladder\n    setTimeout(() => {\n      setWordLadder(ladder);\n      setIsSuccess(true);\n      setIsCalculating(false);\n      setShowResult(true);\n      setIsButtonDisabled(true);\n    }, 1000);\n\n  };\n  \n  // Example usage:\n  const wordList = [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"];\n  \n\n  const handleFindWordLadder = () => {\n    //if (!isButtonDisabled && !isCalculating) {\n      if (startWord === endWord) {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        setErrorMessage('Start and end words cannot be the same');\n      } else {\n        findLadder(startWord, endWord, wordList);\n      }\n    //}\n  };\n\n  const handleCloseModal = () => {\n    setErrorMessage('');\n    setStartWord('');\n    setEndWord('');\n    setIsTextboxesDisabled(false);\n  };\n\n  const ladderSteps = [];\n  for (let i = 0; i < wordLadder.length - 1; i++) {\n    const fromWord = wordLadder[i];\n    const toWord = wordLadder[i + 1];\n    if (fromWord !== toWord) {\n      ladderSteps.push(\n        <div key={i} className=\"ladder-step\">\n          <div className=\"ladder-line\" />\n          <div className=\"ladder-word\">{toWord}</div>\n        </div>\n      );\n    }\n  }\n\n  const scrollableStyle = wordLadder.length > 8 ? { maxHeight: '200px', overflowY: 'scroll' } : {};\n\n  return (\n    <div className=\"container d-flex align-items-center justify-content-center vh-100\">\n      <div className=\"word-ladder-title\">\n      {'Word Ladder'.split('').map((char, index) => {\n    if (char === ' ') return <span key={index}>&nbsp;&nbsp;&nbsp;</span>; // Add non-breaking space\n    return (\n      <div key={index} className=\"title-letter\">\n        {char}\n      </div>\n    );\n  })}\n      </div>\n      <div className=\"word-ladder-container\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter start word (alphabets only)\"\n            value={startWord}\n            onChange={handleStartWordChange}\n            disabled={isTextboxesDisabled === true ? 'disabled' : ''}\n          />\n          {isCalculating && (\n            <div className=\"spinner-container\">\n              <div className=\"spinner\"></div>\n            </div>\n          )}\n          \n        {/* Word Ladder Result */}\n        {showResult && isSuccess && !isCalculating && (\n          <div className=\"word-ladder-result\">\n            <div className=\"word-ladder-scrollable\" style={scrollableStyle}>\n              <ul className=\"word-list\">\n                {wordLadder.map((word, index) => (\n                  <li key={index} className=\"word-list-item animate__animated animate__fadeInUp\">\n                    {word}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter end word (alphabets only)\"\n            value={endWord}\n            onChange={handleEndWordChange}\n            disabled={isTextboxesDisabled === true ? 'disabled' : ''}\n          />\n          <button \n            onClick={handleFindWordLadder} \n            disabled={!startWord || !endWord || isButtonDisabled || isSameWords}>\n          Solve\n          </button>\n          {errorMessage && (\n            <ErrorAlert message={errorMessage} onClose={handleCloseModal} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordLadder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}