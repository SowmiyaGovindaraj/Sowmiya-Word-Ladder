{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abida\\\\OneDrive\\\\Documents\\\\React\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ErrorAlert from './AlertDialogBox';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordLadder = () => {\n  _s();\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isTextboxesDisabled, setIsTextboxesDisabled] = useState(false);\n  useEffect(() => {\n    setIsButtonDisabled(startWord === '' || endWord === '' || startWord.length !== endWord.length);\n    setShowResult(false); // Clear solution on input change\n  }, [startWord, endWord]);\n  const handleStartWordChange = e => {\n    setStartWord(e.target.value.trim().toLowerCase().replace(/[^a-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const handleEndWordChange = e => {\n    setEndWord(e.target.value.trim().toLowerCase().replace(/[^a-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  function findLadder(startWord, endWord, wordList) {\n    const wordSet = new Set(wordList);\n    if (!wordSet.has(endWord)) {\n      setIsButtonDisabled(true);\n      setIsTextboxesDisabled(true);\n      return setErrorMessage('Not Found'); // End word not in the dictionary.\n    }\n\n    const neighborsMap = new Map();\n    const ladder = [];\n    function findNeighbors(word) {\n      const neighbors = [];\n      for (let i = 0; i < word.length; i++) {\n        for (let charCode = 97; charCode <= 122; charCode++) {\n          const newWord = word.slice(0, i) + String.fromCharCode(charCode) + word.slice(i + 1);\n          if (wordSet.has(newWord) && newWord !== word) {\n            neighbors.push(newWord);\n          }\n        }\n      }\n      return neighbors;\n    }\n    function buildNeighborsMap() {\n      for (const word of wordSet) {\n        neighborsMap.set(word, findNeighbors(word));\n      }\n    }\n    function bfs() {\n      const queue = [[startWord]];\n      const visited = new Set([startWord]);\n      while (queue.length) {\n        const path = queue.shift();\n        const currentWord = path[path.length - 1];\n        if (currentWord === endWord) {\n          return path;\n        }\n        for (const neighbor of neighborsMap.get(currentWord)) {\n          if (!visited.has(neighbor)) {\n            visited.add(neighbor);\n            queue.push([...path, neighbor]);\n          }\n        }\n      }\n      return [];\n    }\n    buildNeighborsMap();\n    ladder.push(...bfs());\n    findWordLadder(ladder);\n    return ladder;\n  }\n  const findWordLadder = () => {\n    setIsCalculating(true);\n\n    // Simulate API call to find the word ladder\n    setTimeout(() => {\n      const ladder = ['hit', 'hot', 'dot', 'dog', 'cog'];\n      setWordLadder(ladder);\n      setIsSuccess(true);\n      setIsCalculating(false);\n      setShowResult(true);\n    }, 1000);\n    setStartWord('');\n    setEndWord('');\n  };\n\n  // Example usage:\n  const wordList = [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"];\n  const handleFindWordLadder = () => {\n    if (!isButtonDisabled && !isCalculating) {\n      if (startWord === endWord) {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        setErrorMessage('Start and end words cannot be the same.');\n      } else {\n        findLadder(startWord, endWord, wordList);\n      }\n    }\n  };\n  const handleCloseModal = () => {\n    setErrorMessage('');\n    setStartWord('');\n    setEndWord('');\n    setIsTextboxesDisabled(false);\n  };\n  const ladderSteps = [];\n  for (let i = 0; i < wordLadder.length - 1; i++) {\n    const fromWord = wordLadder[i];\n    const toWord = wordLadder[i + 1];\n    if (fromWord !== toWord) {\n      ladderSteps.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ladder-step\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ladder-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ladder-word\",\n          children: toWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  const scrollableStyle = wordLadder.length > 8 ? {\n    maxHeight: '200px',\n    overflowY: 'scroll'\n  } : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container d-flex align-items-center justify-content-center vh-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-ladder-title\",\n      children: 'Word Ladder'.split('').map((char, index) => {\n        if (char === ' ') return null; // Skip spaces\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-letter\",\n          children: char\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-ladder-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Enter start word (alphabets only)\",\n          value: startWord,\n          onChange: handleStartWordChange,\n          disabled: isTextboxesDisabled === true ? 'disabled' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), showResult && isSuccess && !isCalculating && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-ladder-result\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-ladder-scrollable\",\n            style: scrollableStyle,\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"word-list\",\n              children: wordLadder.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"word-list-item animate__animated animate__fadeInUp\",\n                children: word\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Enter end word (alphabets only)\",\n          value: endWord,\n          onChange: handleEndWordChange,\n          disabled: isTextboxesDisabled === true ? 'disabled' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFindWordLadder,\n          className: \"btn btn-primary animate__animated animate__heartBeat\",\n          disabled: isButtonDisabled || isCalculating,\n          children: [isCalculating && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), \"Solve\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n          message: errorMessage,\n          onClose: handleCloseModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(WordLadder, \"5McVJptSm9lmxyEn9/dchOu0A8U=\");\n_c = WordLadder;\nexport default WordLadder;\nvar _c;\n$RefreshReg$(_c, \"WordLadder\");","map":{"version":3,"names":["React","useState","useEffect","ErrorAlert","jsxDEV","_jsxDEV","WordLadder","_s","startWord","setStartWord","endWord","setEndWord","wordLadder","setWordLadder","showResult","setShowResult","isCalculating","setIsCalculating","isButtonDisabled","setIsButtonDisabled","isSuccess","setIsSuccess","errorMessage","setErrorMessage","isTextboxesDisabled","setIsTextboxesDisabled","length","handleStartWordChange","e","target","value","trim","toLowerCase","replace","handleEndWordChange","findLadder","wordList","wordSet","Set","has","neighborsMap","Map","ladder","findNeighbors","word","neighbors","i","charCode","newWord","slice","String","fromCharCode","push","buildNeighborsMap","set","bfs","queue","visited","path","shift","currentWord","neighbor","get","add","findWordLadder","setTimeout","handleFindWordLadder","handleCloseModal","ladderSteps","fromWord","toWord","className","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableStyle","maxHeight","overflowY","split","map","char","index","type","placeholder","onChange","disabled","style","onClick","message","onClose","_c","$RefreshReg$"],"sources":["C:/Users/abida/OneDrive/Documents/React/my-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ErrorAlert from './AlertDialogBox';\n\nimport './App.css';\n\nconst WordLadder = () => {\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isTextboxesDisabled, setIsTextboxesDisabled] = useState(false)\n\n  useEffect(() => {\n    setIsButtonDisabled(startWord === '' || endWord === '' || startWord.length !== endWord.length);\n    setShowResult(false); // Clear solution on input change\n  }, [startWord, endWord]);\n\n  const handleStartWordChange = (e) => {\n    setStartWord(e.target.value.trim().toLowerCase().replace(/[^a-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const handleEndWordChange = (e) => {\n    setEndWord(e.target.value.trim().toLowerCase().replace(/[^a-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  function findLadder(startWord, endWord, wordList) {\n    const wordSet = new Set(wordList);\n    if (!wordSet.has(endWord)) {\n      setIsButtonDisabled(true);\n      setIsTextboxesDisabled(true);\n      return setErrorMessage('Not Found'); // End word not in the dictionary.\n    }\n  \n    const neighborsMap = new Map();\n    const ladder = [];\n  \n    function findNeighbors(word) {\n      const neighbors = [];\n      for (let i = 0; i < word.length; i++) {\n        for (let charCode = 97; charCode <= 122; charCode++) {\n          const newWord = word.slice(0, i) + String.fromCharCode(charCode) + word.slice(i + 1);\n          if (wordSet.has(newWord) && newWord !== word) {\n            neighbors.push(newWord);\n          }\n        }\n      }\n      return neighbors;\n    }\n  \n    function buildNeighborsMap() {\n      for (const word of wordSet) {\n        neighborsMap.set(word, findNeighbors(word));\n      }\n    }\n  \n    function bfs() {\n      const queue = [[startWord]];\n      const visited = new Set([startWord]);\n  \n      while (queue.length) {\n        const path = queue.shift();\n        const currentWord = path[path.length - 1];\n  \n        if (currentWord === endWord) {\n          return path;\n        }\n  \n        for (const neighbor of neighborsMap.get(currentWord)) {\n          if (!visited.has(neighbor)) {\n            visited.add(neighbor);\n            queue.push([...path, neighbor]);\n          }\n        }\n      }\n  \n      return [];\n    }\n  \n    buildNeighborsMap();\n    ladder.push(...bfs());\n    findWordLadder(ladder);\n    return ladder;\n  }\n\n  const findWordLadder = () => {\n    setIsCalculating(true);\n\n    // Simulate API call to find the word ladder\n    setTimeout(() => {\n      const ladder = ['hit', 'hot', 'dot', 'dog', 'cog'];\n      setWordLadder(ladder);\n      setIsSuccess(true);\n      setIsCalculating(false);\n      setShowResult(true);\n    }, 1000);\n    \n    setStartWord('');\n    setEndWord('');\n  };\n  \n  // Example usage:\n  const wordList = [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"];\n  \n\n  const handleFindWordLadder = () => {\n    if (!isButtonDisabled && !isCalculating) {\n      if (startWord === endWord) {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        setErrorMessage('Start and end words cannot be the same.');\n      } else {\n        findLadder(startWord, endWord, wordList);\n      }\n    }\n  };\n\n  const handleCloseModal = () => {\n    setErrorMessage('');\n    setStartWord('');\n    setEndWord('');\n    setIsTextboxesDisabled(false);\n  };\n\n  const ladderSteps = [];\n  for (let i = 0; i < wordLadder.length - 1; i++) {\n    const fromWord = wordLadder[i];\n    const toWord = wordLadder[i + 1];\n    if (fromWord !== toWord) {\n      ladderSteps.push(\n        <div key={i} className=\"ladder-step\">\n          <div className=\"ladder-line\" />\n          <div className=\"ladder-word\">{toWord}</div>\n        </div>\n      );\n    }\n  }\n\n  const scrollableStyle = wordLadder.length > 8 ? { maxHeight: '200px', overflowY: 'scroll' } : {};\n\n  return (\n    <div className=\"container d-flex align-items-center justify-content-center vh-100\">\n      <div className=\"word-ladder-title\">\n      {'Word Ladder'.split('').map((char, index) => {\n              if (char === ' ') return null; // Skip spaces\n              return (\n                <div key={index} className=\"title-letter\">\n                  {char}\n                </div>\n              );\n            })}\n      </div>\n      <div className=\"word-ladder-container\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter start word (alphabets only)\"\n            value={startWord}\n            onChange={handleStartWordChange}\n            disabled={isTextboxesDisabled === true ? 'disabled' : ''}\n          />\n          \n        {/* Word Ladder Result */}\n        {showResult && isSuccess && !isCalculating && (\n          <div className=\"word-ladder-result\">\n            <div className=\"word-ladder-scrollable\" style={scrollableStyle}>\n              <ul className=\"word-list\">\n                {wordLadder.map((word, index) => (\n                  <li key={index} className=\"word-list-item animate__animated animate__fadeInUp\">\n                    {word}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter end word (alphabets only)\"\n            value={endWord}\n            onChange={handleEndWordChange}\n            disabled={isTextboxesDisabled === true ? 'disabled' : ''}\n          />\n          <button\n            onClick={handleFindWordLadder}\n            className=\"btn btn-primary animate__animated animate__heartBeat\"\n            disabled={isButtonDisabled || isCalculating}\n          >\n          {isCalculating && (\n            <div className=\"spinner-container\">\n              <div className=\"spinner\"></div>\n            </div>\n          )}Solve\n          </button>\n          {errorMessage && (\n            <ErrorAlert message={errorMessage} onClose={handleCloseModal} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordLadder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}