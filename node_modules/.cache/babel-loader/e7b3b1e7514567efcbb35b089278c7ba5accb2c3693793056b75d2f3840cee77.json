{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abida\\\\OneDrive\\\\Documents\\\\React\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ErrorAlert from './AlertDialogBox';\n//import wordList from './DataStub.json';\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordLadder = () => {\n  _s();\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isTextboxesDisabled, setIsTextboxesDisabled] = useState(false);\n  useEffect(() => {\n    setIsButtonDisabled(startWord === '' || endWord === '' || startWord.length !== endWord.length);\n    setShowResult(false); // Clear solution on input change\n  }, [startWord, endWord]);\n  const handleStartWordChange = e => {\n    setStartWord(e.target.value.trim().replace(/[^A-Za-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const wordList = ['GLASS', 'BRICK', 'BLINK', 'GARDEN', 'FOREST'\n  // Add more words here...\n  ];\n\n  const handleEndWordChange = e => {\n    setEndWord(e.target.value.trim().replace(/[^A-Za-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const findNeighbors = (word, wordSet) => {\n    const neighbors = [];\n    for (let i = 0; i < word.length; i++) {\n      for (let charCode = 97; charCode <= 122; charCode++) {\n        const newWord = word.slice(0, i) + String.fromCharCode(charCode) + word.slice(i + 1);\n        if (wordSet.has(newWord) && newWord !== word) {\n          let diffCount = 0;\n          for (let j = 0; j < word.length; j++) {\n            if (word[j] !== newWord[j]) {\n              diffCount++;\n            }\n          }\n          if (diffCount === 1) {\n            neighbors.push(newWord);\n          }\n        }\n      }\n    }\n    return neighbors;\n  };\n  const buildNeighborsMap = wordList => {\n    const wordSet = new Set(wordList);\n    const neighborsMap = {};\n    for (const word of wordSet) {\n      neighborsMap[word] = findNeighbors(word, wordSet);\n    }\n    return neighborsMap;\n  };\n  const bfs = (startWord, endWord, neighborsMap) => {\n    const queue = [[startWord]];\n    const visited = new Set([startWord]);\n    while (queue.length) {\n      const path = queue.shift();\n      const currentWord = path[path.length - 1];\n      if (currentWord === endWord) {\n        return path;\n      }\n      for (const neighbor of neighborsMap[currentWord] || []) {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push([...path, neighbor]);\n        }\n      }\n    }\n    return [];\n  };\n  const handleFindWordLadder = () => {\n    setIsSuccess(false);\n    setWordLadder([]);\n    setIsCalculating(true);\n\n    // Simulate API call to find the word ladder\n    setTimeout(() => {\n      const neighborsMap = buildNeighborsMap(wordList);\n      const ladder = bfs(startWord, endWord, neighborsMap);\n      if (ladder.length === 0) {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        setErrorMessage('No solution can be found');\n      } else {\n        setIsSuccess(true);\n        setWordLadder(ladder);\n        setShowResult(true);\n      }\n      setIsCalculating(false);\n    }, 1000);\n  };\n  const handleCloseModal = () => {\n    setErrorMessage('');\n    setStartWord('');\n    setEndWord('');\n    setIsTextboxesDisabled(false);\n  };\n  const ladderSteps = [];\n  for (let i = 0; i < wordLadder.length - 1; i++) {\n    const fromWord = wordLadder[i];\n    const toWord = wordLadder[i + 1];\n    if (fromWord !== toWord) {\n      ladderSteps.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ladder-step\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ladder-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ladder-word\",\n          children: toWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  const scrollableStyle = wordLadder.length > 8 ? {\n    maxHeight: '200px',\n    overflowY: 'scroll'\n  } : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container d-flex align-items-center justify-content-center vh-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-ladder-title\",\n      children: 'Word Ladder'.split('').map((char, index) => {\n        if (char === ' ') return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\xA0\\xA0\\xA0\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 36\n        }, this); // Add non-breaking space\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-letter\",\n          children: char\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-ladder-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Enter start word (alphabets only)\",\n          value: startWord,\n          onChange: handleStartWordChange,\n          disabled: isTextboxesDisabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), isCalculating && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), showResult && isSuccess && !isCalculating && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-ladder-result\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-ladder-scrollable\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"word-list\",\n              children: wordLadder.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"word-list-item animate__animated animate__fadeInUp\",\n                children: word\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Enter end word (alphabets only)\",\n          value: endWord,\n          onChange: handleEndWordChange,\n          disabled: isTextboxesDisabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFindWordLadder,\n          className: \"btn btn-primary animate__animated animate__heartBeat\",\n          disabled: !startWord || !endWord || isButtonDisabled,\n          children: \"Solve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-danger\",\n          role: \"alert\",\n          children: [errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"close\",\n            onClick: handleCloseModal,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(WordLadder, \"5McVJptSm9lmxyEn9/dchOu0A8U=\");\n_c = WordLadder;\nexport default WordLadder;\nvar _c;\n$RefreshReg$(_c, \"WordLadder\");","map":{"version":3,"names":["React","useState","useEffect","ErrorAlert","jsxDEV","_jsxDEV","WordLadder","_s","startWord","setStartWord","endWord","setEndWord","wordLadder","setWordLadder","showResult","setShowResult","isCalculating","setIsCalculating","isButtonDisabled","setIsButtonDisabled","isSuccess","setIsSuccess","errorMessage","setErrorMessage","isTextboxesDisabled","setIsTextboxesDisabled","length","handleStartWordChange","e","target","value","trim","replace","wordList","handleEndWordChange","findNeighbors","word","wordSet","neighbors","i","charCode","newWord","slice","String","fromCharCode","has","diffCount","j","push","buildNeighborsMap","Set","neighborsMap","bfs","queue","visited","path","shift","currentWord","neighbor","add","handleFindWordLadder","setTimeout","ladder","handleCloseModal","ladderSteps","fromWord","toWord","className","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableStyle","maxHeight","overflowY","split","map","char","index","type","placeholder","onChange","disabled","onClick","role","_c","$RefreshReg$"],"sources":["C:/Users/abida/OneDrive/Documents/React/my-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ErrorAlert from './AlertDialogBox';\n//import wordList from './DataStub.json';\n\nimport './App.css';\n\nconst WordLadder = () => {\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isTextboxesDisabled, setIsTextboxesDisabled] = useState(false);\n\n  useEffect(() => {\n    setIsButtonDisabled(startWord === '' || endWord === '' || startWord.length !== endWord.length);\n    setShowResult(false); // Clear solution on input change\n  }, [startWord, endWord]);\n\n  const handleStartWordChange = (e) => {\n    setStartWord(e.target.value.trim().replace(/[^A-Za-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const wordList = [\n    'GLASS', 'BRICK', 'BLINK', 'GARDEN', 'FOREST'\n    // Add more words here...\n  ];\n\n  const handleEndWordChange = (e) => {\n    setEndWord(e.target.value.trim().replace(/[^A-Za-z]/g, ''));\n    setShowResult(false); // Clear solution when input is edited\n  };\n\n  const findNeighbors = (word, wordSet) => {\n    const neighbors = [];\n    for (let i = 0; i < word.length; i++) {\n      for (let charCode = 97; charCode <= 122; charCode++) {\n        const newWord = word.slice(0, i) + String.fromCharCode(charCode) + word.slice(i + 1);\n        if (wordSet.has(newWord) && newWord !== word) {\n          let diffCount = 0;\n          for (let j = 0; j < word.length; j++) {\n            if (word[j] !== newWord[j]) {\n              diffCount++;\n            }\n          }\n          if (diffCount === 1) {\n            neighbors.push(newWord);\n          }\n        }\n      }\n    }\n    return neighbors;\n  };\n\n  const buildNeighborsMap = (wordList) => {\n    const wordSet = new Set(wordList);\n    const neighborsMap = {};\n\n    for (const word of wordSet) {\n      neighborsMap[word] = findNeighbors(word, wordSet);\n    }\n\n    return neighborsMap;\n  };\n\n  const bfs = (startWord, endWord, neighborsMap) => {\n    const queue = [[startWord]];\n    const visited = new Set([startWord]);\n\n    while (queue.length) {\n      const path = queue.shift();\n      const currentWord = path[path.length - 1];\n\n      if (currentWord === endWord) {\n        return path;\n      }\n\n      for (const neighbor of neighborsMap[currentWord] || []) {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push([...path, neighbor]);\n        }\n      }\n    }\n\n    return [];\n  };\n\n  const handleFindWordLadder = () => {\n    setIsSuccess(false);\n    setWordLadder([]);\n    setIsCalculating(true);\n\n    // Simulate API call to find the word ladder\n    setTimeout(() => {\n      const neighborsMap = buildNeighborsMap(wordList);\n      const ladder = bfs(startWord, endWord, neighborsMap);\n\n      if (ladder.length === 0) {\n        setIsButtonDisabled(true);\n        setIsTextboxesDisabled(true);\n        setErrorMessage('No solution can be found');\n      } else {\n        setIsSuccess(true);\n        setWordLadder(ladder);\n        setShowResult(true);\n      }\n\n      setIsCalculating(false);\n    }, 1000);\n  };\n\n  const handleCloseModal = () => {\n    setErrorMessage('');\n    setStartWord('');\n    setEndWord('');\n    setIsTextboxesDisabled(false);\n  };\n\n  const ladderSteps = [];\n  for (let i = 0; i < wordLadder.length - 1; i++) {\n    const fromWord = wordLadder[i];\n    const toWord = wordLadder[i + 1];\n    if (fromWord !== toWord) {\n      ladderSteps.push(\n        <div key={i} className=\"ladder-step\">\n          <div className=\"ladder-line\" />\n          <div className=\"ladder-word\">{toWord}</div>\n        </div>\n      );\n    }\n  }\n\n  const scrollableStyle = wordLadder.length > 8 ? { maxHeight: '200px', overflowY: 'scroll' } : {};\n\n  return (\n    <div className=\"container d-flex align-items-center justify-content-center vh-100\">\n      <div className=\"word-ladder-title\">\n        {'Word Ladder'.split('').map((char, index) => {\n          if (char === ' ') return <span key={index}>&nbsp;&nbsp;&nbsp;</span>; // Add non-breaking space\n          return (\n            <div key={index} className=\"title-letter\">\n              {char}\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"word-ladder-container\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter start word (alphabets only)\"\n            value={startWord}\n            onChange={handleStartWordChange}\n            disabled={isTextboxesDisabled}\n          />\n          {isCalculating && (\n            <div className=\"spinner-container\">\n              <div className=\"spinner\"></div>\n            </div>\n          )}\n          {/* Word Ladder Result */}\n          {showResult && isSuccess && !isCalculating && (\n            <div className=\"word-ladder-result\">\n              <div className=\"word-ladder-scrollable\">\n                <ul className=\"word-list\">\n                  {wordLadder.map((word, index) => (\n                    <li key={index} className=\"word-list-item animate__animated animate__fadeInUp\">\n                      {word}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          )}\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter end word (alphabets only)\"\n            value={endWord}\n            onChange={handleEndWordChange}\n            disabled={isTextboxesDisabled}\n          />\n          <button\n            onClick={handleFindWordLadder}\n            className=\"btn btn-primary animate__animated animate__heartBeat\"\n            disabled={!startWord || !endWord || isButtonDisabled}\n          >\n            Solve\n          </button>\n          {errorMessage && (\n            <div className=\"alert alert-danger\" role=\"alert\">\n              {errorMessage}\n              <button type=\"button\" className=\"close\" onClick={handleCloseModal}>\n                <span>&times;</span>\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordLadder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}