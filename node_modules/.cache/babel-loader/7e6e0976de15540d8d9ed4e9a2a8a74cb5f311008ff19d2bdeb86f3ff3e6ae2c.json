{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abida\\\\OneDrive\\\\Documents\\\\React\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css'; // Import the CSS file\nimport data from './DataStub.json';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordLadder = () => {\n  _s();\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const findWordLadder = () => {\n    // Function to check if two words differ by only one character\n    const isAdjacent = (word1, word2) => {\n      let diffCount = 0;\n      for (let i = 0; i < word1.length; i++) {\n        if (word1[i] !== word2[i]) {\n          diffCount++;\n          if (diffCount > 1) return false;\n        }\n      }\n      return diffCount === 1;\n    };\n\n    // Breadth-First Search to find the word ladder\n    const bfs = (start, end, data) => {\n      const visited = new Set();\n      const queue = [];\n      queue.push([start]);\n      while (queue.length > 0) {\n        const currentPath = queue.shift();\n        const lastWord = currentPath[currentPath.length - 1];\n        if (lastWord === end) {\n          return currentPath;\n        }\n        for (const word of data) {\n          if (!visited.has(word) && isAdjacent(lastWord, word)) {\n            visited.add(word);\n            queue.push([...currentPath, word]);\n          }\n        }\n        console.log('word', data);\n      }\n      return []; // Empty array means no word ladder found\n    };\n\n    // Sample word list (replace this with your actual word list)\n    const ladder = bfs(startWord, endWord, data);\n    setWordLadder(ladder);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-ladder-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Word Ladder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container d-flex justify-content-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: startWord,\n        onChange: e => setStartWord(e.target.value),\n        className: \"form-control\",\n        placeholder: \"Enter start word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: endWord,\n        onChange: e => setEndWord(e.target.value),\n        className: \"form-control\",\n        placeholder: \"Enter end word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: findWordLadder,\n        className: \"btn btn-primary\",\n        children: \"Find Word Ladder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), wordLadder.length > 0 &&\n    /*#__PURE__*/\n    // Conditionally render Word Ladder result\n    _jsxDEV(\"div\", {\n      className: \"result-container mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-center\",\n        children: \"Word Ladder Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scrollable-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-unstyled text-center\",\n          children: wordLadder.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: word\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(WordLadder, \"iibxkDgti3GeX/Jw+wnU/MdHbRE=\");\n_c = WordLadder;\nexport default WordLadder;\nvar _c;\n$RefreshReg$(_c, \"WordLadder\");","map":{"version":3,"names":["React","useState","data","jsxDEV","_jsxDEV","WordLadder","_s","startWord","setStartWord","endWord","setEndWord","wordLadder","setWordLadder","findWordLadder","isAdjacent","word1","word2","diffCount","i","length","bfs","start","end","visited","Set","queue","push","currentPath","shift","lastWord","word","has","add","console","log","ladder","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/abida/OneDrive/Documents/React/my-react-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css'; // Import the CSS file\nimport data from './DataStub.json'\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\n\nconst WordLadder = () => {\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n\n  const findWordLadder = () => {\n    // Function to check if two words differ by only one character\n    const isAdjacent = (word1, word2) => {\n      let diffCount = 0;\n      for (let i = 0; i < word1.length; i++) {\n        if (word1[i] !== word2[i]) {\n          diffCount++;\n          if (diffCount > 1) return false;\n        }\n      }\n      return diffCount === 1;\n    };\n  \n    // Breadth-First Search to find the word ladder\n    const bfs = (start, end, data) => {\n      const visited = new Set();\n      const queue = [];\n      queue.push([start]);\n  \n      while (queue.length > 0) {\n        const currentPath = queue.shift();\n        const lastWord = currentPath[currentPath.length - 1];\n  \n        if (lastWord === end) {\n          return currentPath;\n        }\n  \n        for (const word of data) {\n          if (!visited.has(word) && isAdjacent(lastWord, word)) {\n            visited.add(word);\n            queue.push([...currentPath, word]);\n          }\n        }\n        console.log('word', data);\n      }\n  \n      return []; // Empty array means no word ladder found\n    };\n  \n    // Sample word list (replace this with your actual word list)\n    const ladder = bfs(startWord, endWord, data);\n    setWordLadder(ladder);\n  };\n\n  return (\n    <div className=\"word-ladder-container\">\n      <h1 className=\"text-center\">Word Ladder</h1>\n      <div className=\"input-container d-flex justify-content-center\">\n        <input\n          type=\"text\"\n          value={startWord}\n          onChange={(e) => setStartWord(e.target.value)}\n          className=\"form-control\"\n          placeholder=\"Enter start word\"\n        />\n        <input\n          type=\"text\"\n          value={endWord}\n          onChange={(e) => setEndWord(e.target.value)}\n          className=\"form-control\"\n          placeholder=\"Enter end word\"\n        />\n        <button onClick={findWordLadder} className=\"btn btn-primary\">\n          Find Word Ladder\n        </button>\n      </div>\n      {wordLadder.length > 0 && ( // Conditionally render Word Ladder result\n        <div className=\"result-container mt-4\">\n          <h3 className=\"text-center\">Word Ladder Result:</h3>\n          <div className=\"scrollable-list\">\n            <ul className=\"list-unstyled text-center\">\n              {wordLadder.map((word, index) => (\n                <li key={index}>{word}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WordLadder;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW,CAAC,CAAC;AACpB,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAO,sCAAsC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMY,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACA,MAAMC,UAAU,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;MACnC,IAAIC,SAAS,GAAG,CAAC;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;QACrC,IAAIH,KAAK,CAACG,CAAC,CAAC,KAAKF,KAAK,CAACE,CAAC,CAAC,EAAE;UACzBD,SAAS,EAAE;UACX,IAAIA,SAAS,GAAG,CAAC,EAAE,OAAO,KAAK;QACjC;MACF;MACA,OAAOA,SAAS,KAAK,CAAC;IACxB,CAAC;;IAED;IACA,MAAMG,GAAG,GAAGA,CAACC,KAAK,EAAEC,GAAG,EAAEpB,IAAI,KAAK;MAChC,MAAMqB,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;MACzB,MAAMC,KAAK,GAAG,EAAE;MAChBA,KAAK,CAACC,IAAI,CAAC,CAACL,KAAK,CAAC,CAAC;MAEnB,OAAOI,KAAK,CAACN,MAAM,GAAG,CAAC,EAAE;QACvB,MAAMQ,WAAW,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC;QACjC,MAAMC,QAAQ,GAAGF,WAAW,CAACA,WAAW,CAACR,MAAM,GAAG,CAAC,CAAC;QAEpD,IAAIU,QAAQ,KAAKP,GAAG,EAAE;UACpB,OAAOK,WAAW;QACpB;QAEA,KAAK,MAAMG,IAAI,IAAI5B,IAAI,EAAE;UACvB,IAAI,CAACqB,OAAO,CAACQ,GAAG,CAACD,IAAI,CAAC,IAAIhB,UAAU,CAACe,QAAQ,EAAEC,IAAI,CAAC,EAAE;YACpDP,OAAO,CAACS,GAAG,CAACF,IAAI,CAAC;YACjBL,KAAK,CAACC,IAAI,CAAC,CAAC,GAAGC,WAAW,EAAEG,IAAI,CAAC,CAAC;UACpC;QACF;QACAG,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEhC,IAAI,CAAC;MAC3B;MAEA,OAAO,EAAE,CAAC,CAAC;IACb,CAAC;;IAED;IACA,MAAMiC,MAAM,GAAGf,GAAG,CAACb,SAAS,EAAEE,OAAO,EAAEP,IAAI,CAAC;IAC5CU,aAAa,CAACuB,MAAM,CAAC;EACvB,CAAC;EAED,oBACE/B,OAAA;IAAKgC,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCjC,OAAA;MAAIgC,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5CrC,OAAA;MAAKgC,SAAS,EAAC,+CAA+C;MAAAC,QAAA,gBAC5DjC,OAAA;QACEsC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEpC,SAAU;QACjBqC,QAAQ,EAAGC,CAAC,IAAKrC,YAAY,CAACqC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC9CP,SAAS,EAAC,cAAc;QACxBW,WAAW,EAAC;MAAkB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,eACFrC,OAAA;QACEsC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAElC,OAAQ;QACfmC,QAAQ,EAAGC,CAAC,IAAKnC,UAAU,CAACmC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC5CP,SAAS,EAAC,cAAc;QACxBW,WAAW,EAAC;MAAgB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFrC,OAAA;QAAQ4C,OAAO,EAAEnC,cAAe;QAACuB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAE7D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACL9B,UAAU,CAACQ,MAAM,GAAG,CAAC;IAAA;IAAM;IAC1Bf,OAAA;MAAKgC,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpCjC,OAAA;QAAIgC,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpDrC,OAAA;QAAKgC,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9BjC,OAAA;UAAIgC,SAAS,EAAC,2BAA2B;UAAAC,QAAA,EACtC1B,UAAU,CAACsC,GAAG,CAAC,CAACnB,IAAI,EAAEoB,KAAK,kBAC1B9C,OAAA;YAAAiC,QAAA,EAAiBP;UAAI,GAAZoB,KAAK;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAC3B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnC,EAAA,CArFID,UAAU;AAAA8C,EAAA,GAAV9C,UAAU;AAuFhB,eAAeA,UAAU;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}