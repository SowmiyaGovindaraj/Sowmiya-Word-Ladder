{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abida\\\\OneDrive\\\\Documents\\\\React\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// import { findLadder } from 'word-ladder-js';\nimport './App.css'; // Import the custom WordLadder.css file\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordLadder = () => {\n  _s();\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n  const findWordLadder = () => {\n    // Function to check if two words differ by only one character\n    const isAdjacent = (word1, word2) => {\n      let diffCount = 0;\n      for (let i = 0; i < word1.length; i++) {\n        if (word1[i] !== word2[i]) {\n          diffCount++;\n          if (diffCount > 1) return false;\n        }\n      }\n      return diffCount === 1;\n    };\n\n    // Breadth-First Search to find the word ladder\n    const bfs = (start, end, wordList) => {\n      const visited = new Set();\n      const queue = [];\n      queue.push([start]);\n      while (queue.length > 0) {\n        const currentPath = queue.shift();\n        const lastWord = currentPath[currentPath.length - 1];\n        if (lastWord === end) {\n          return currentPath;\n        }\n        for (const word of wordList) {\n          if (!visited.has(word) && isAdjacent(lastWord, word)) {\n            visited.add(word);\n            queue.push([...currentPath, word]);\n          }\n        }\n      }\n      return []; // Empty array means no word ladder found\n    };\n\n    // Sample word list (replace this with your actual word list)\n    const wordList = ['hot', 'dot', 'dog', 'lot', 'log', 'cog'];\n    const ladder = bfs(startWord, endWord, wordList);\n    setWordLadder(ladder);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-ladder-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Word Ladder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: startWord,\n            onChange: e => setStartWord(e.target.value),\n            className: \"form-control mb-2\",\n            placeholder: \"Enter start word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: endWord,\n            onChange: e => setEndWord(e.target.value),\n            className: \"form-control mb-2\",\n            placeholder: \"Enter end word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            // onClick={findWordLadder}\n            className: \"btn btn-primary animate__animated animate__heartBeat\",\n            children: \"Find Word Ladder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `col-md-4 ${showResult ? 'visible' : 'invisible'}`,\n        children: wordLadder.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-container mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-center\",\n            children: \"Word Ladder Result:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scrollable-list\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-unstyled text-center\",\n              children: wordLadder.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"animate__animated animate__fadeInUp\",\n                children: word\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(WordLadder, \"iibxkDgti3GeX/Jw+wnU/MdHbRE=\");\n_c = WordLadder;\nexport default WordLadder;\nvar _c;\n$RefreshReg$(_c, \"WordLadder\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WordLadder","_s","startWord","setStartWord","endWord","setEndWord","wordLadder","setWordLadder","findWordLadder","isAdjacent","word1","word2","diffCount","i","length","bfs","start","end","wordList","visited","Set","queue","push","currentPath","shift","lastWord","word","has","add","ladder","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","showResult","map","index","_c","$RefreshReg$"],"sources":["C:/Users/abida/OneDrive/Documents/React/my-react-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n// import { findLadder } from 'word-ladder-js';\nimport './App.css'; // Import the custom WordLadder.css file\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\n\nconst WordLadder = () => {\n  const [startWord, setStartWord] = useState('');\n  const [endWord, setEndWord] = useState('');\n  const [wordLadder, setWordLadder] = useState([]);\n\n  const findWordLadder = () => {\n    // Function to check if two words differ by only one character\n    const isAdjacent = (word1, word2) => {\n      let diffCount = 0;\n      for (let i = 0; i < word1.length; i++) {\n        if (word1[i] !== word2[i]) {\n          diffCount++;\n          if (diffCount > 1) return false;\n        }\n      }\n      return diffCount === 1;\n    };\n\n    // Breadth-First Search to find the word ladder\n    const bfs = (start, end, wordList) => {\n      const visited = new Set();\n      const queue = [];\n      queue.push([start]);\n\n      while (queue.length > 0) {\n        const currentPath = queue.shift();\n        const lastWord = currentPath[currentPath.length - 1];\n\n        if (lastWord === end) {\n          return currentPath;\n        }\n\n        for (const word of wordList) {\n          if (!visited.has(word) && isAdjacent(lastWord, word)) {\n            visited.add(word);\n            queue.push([...currentPath, word]);\n          }\n        }\n      }\n\n      return []; // Empty array means no word ladder found\n    };\n\n    // Sample word list (replace this with your actual word list)\n    const wordList = ['hot', 'dot', 'dog', 'lot', 'log', 'cog'];\n\n    const ladder = bfs(startWord, endWord, wordList);\n    setWordLadder(ladder);\n  };\n\n\n  return (\n    <div className=\"word-ladder-container\">\n      <h1 className=\"text-center\">Word Ladder</h1>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-4\">\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              value={startWord}\n              onChange={(e) => setStartWord(e.target.value)}\n              className=\"form-control mb-2\"\n              placeholder=\"Enter start word\"\n            />\n            <input\n              type=\"text\"\n              value={endWord}\n              onChange={(e) => setEndWord(e.target.value)}\n              className=\"form-control mb-2\"\n              placeholder=\"Enter end word\"\n            />\n            <button\n              // onClick={findWordLadder}\n              className=\"btn btn-primary animate__animated animate__heartBeat\"\n            >\n              Find Word Ladder\n            </button>\n          </div>\n        </div>\n        <div className={`col-md-4 ${showResult ? 'visible' : 'invisible'}`}>\n          {wordLadder.length > 0 && (\n            <div className=\"result-container mt-4\">\n              <h3 className=\"text-center\">Word Ladder Result:</h3>\n              <div className=\"scrollable-list\">\n                <ul className=\"list-unstyled text-center\">\n                  {wordLadder.map((word, index) => (\n                    <li key={index} className=\"animate__animated animate__fadeInUp\">\n                      {word}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordLadder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}